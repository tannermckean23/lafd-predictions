```{r, tidy=T}
library(readr)
library(xgboost)
library(chron)
library(Matrix)
library(randomForest)
 
setwd("C:/Users/admin/Desktop/Spring2017/stats101C/project")
 
# XGBOOST -----------------------------------------------------------------
 
D <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/lafdtraining updated.csv")
 
#renaming variables to remove spaces
colnames(D)[colnames(D)=="First in District"] <- "firstInDistrict"
colnames(D)[colnames(D)=="Emergency Dispatch Code"] <- "emergencyDispatchCode"
colnames(D)[colnames(D)=="Dispatch Sequence"] <- "dispatchSequence"
colnames(D)[colnames(D)=="Dispatch Status"] <- "dispatchStatus"
colnames(D)[colnames(D)=="Unit Type"] <- "unitType"
colnames(D)[colnames(D)=="PPE Level"] <- "PPELevel"
colnames(D)[colnames(D)=="Incident Creation Time (GMT)"] <- "incidentCreationTime"
 
 
notusing <- which(names(D) %in% c("row.id","PPELevel","dispatchStatus","incident.ID","emergencyDispatchCode","incidentCreationTime","unitType"))
 
D <- na.omit(D[,-notusing])
 
D$elapsed_time <- as.numeric(D$elapsed_time)
D$firstInDistrict <- as.numeric(D$firstInDistrict)
D$dispatchSequence <- as.numeric(D$dispatchSequence)
D$year <- as.numeric(D$year)
 
varToRemove <- which(names(D) %in% c("row.id","incident.ID","emergencyDispatchCode","incidentCreationTime","time_dec","elapsed_time"))
 
xgb <- xgboost(data=data.matrix(D[,-varToRemove]),
               label=D$elapsed_time,
               nrounds=27,
               eta=.3,
               objective="reg:linear")
 
 
# XGBOOST PREDICTIONS FOR KAGGLE ------------------------------------------
realdealTEST <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/testing.txt")
 
colnames(realdealTEST)[colnames(realdealTEST)=="First in District"] <- "firstInDistrict"
colnames(realdealTEST)[colnames(realdealTEST)=="Emergency Dispatch Code"] <- "emergencyDispatchCode"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Sequence"] <- "dispatchSequence"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Status"] <- "dispatchStatus"
colnames(realdealTEST)[colnames(realdealTEST)=="Unit Type"] <- "unitType"
colnames(realdealTEST)[colnames(realdealTEST)=="PPE Level"] <- "PPELevel"
colnames(realdealTEST)[colnames(realdealTEST)=="Incident Creation Time (GMT)"] <- "incidentCreationTime"
 
varToRemove.realdealTEST <- which(names(realdealTEST) %in% c("row.id","PPELevel","unitType","incident.ID","emergencyDispatchCode","incidentCreationTime","time","dispatchStatus","time_dec"))
realdealTEST$year <- as.numeric(realdealTEST$year)
realdealTEST$firstInDistrict <- as.numeric(realdealTEST$firstInDistrict)
realdealTEST$dispatchSequence <- as.numeric(realdealTEST$dispatchSequence)
 
preds.xgb <- predict(xgb,data.matrix(realdealTEST[,-varToRemove.realdealTEST]))
submit<-data.frame(row.id= realdealTEST$row.id, prediction=preds.xgb)
write.csv(submit,"xgb.csv",row.names=FALSE) # writes file xgb.csv in working directory for kaggle submission
 
 
# RANDOM FOREST -----------------------------------------------------------
 
D <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/lafdtraining updated.csv")
 
#renaming variables to remove spaces
colnames(D)[colnames(D)=="First.in.District"] <- "firstInDistrict"
colnames(D)[colnames(D)=="Emergency.Dispatch.Code"] <- "emergencyDispatchCode"
colnames(D)[colnames(D)=="Dispatch.Sequence"] <- "dispatchSequence"
colnames(D)[colnames(D)=="Dispatch.Status"] <- "dispatchStatus"
colnames(D)[colnames(D)=="Unit.Type"] <- "unitType"
colnames(D)[colnames(D)=="PPE.Level"] <- "PPELevel"
colnames(D)[colnames(D)=="Incident.Creation.Time..GMT."] <- "incidentCreationTime"
 
D$dept <- substr(D$incident.ID,start=6,stop=7) # create a variable for the fire department
 
# creating rush hour variable
bettertime <- strptime(D$incidentCreationTime,format='%H:%M:%S')
a <- times(format(bettertime, '%H:%M:%S'))
D$time <- a
D$time_dec <- as.numeric(a)
 
 
D$rush <- ifelse(D$time_dec > 19/24, 'no', ifelse(
  D$time_dec > 15/24, 'yes', ifelse(
    D$time_dec > 10/24, 'no', ifelse(
      D$time_dec > 5/24, 'yes', 'no'
    )
  )
))
 
#cleaning our data into variables a df that has only our relevant variables
varToRemove <- which(names(D) %in% c("unitType","row.id","incident.ID","emergencyDispatchCode","incidentCreationTime","time","time_dec"))
D <- D[,-varToRemove]
 
#creating categorical var to factors
cols <- c("year", "dispatchStatus", "PPELevel", "dept", "rush")
for(i in cols){
  D[,i] <- as.factor(D[,i])
}
 
# mtry = # of variables selected at each split for regression default
# is number of predictors/3 in our case we have 7 predictors lets use 3 we 
# can cv to make this better because lower mtry means 1. less correlation b/n
# trees but decreases strength of each tree
 
#running random forest
D <- na.omit(D)
set.seed(123)
index <- sample(nrow(D),200000, rep=F) 
train <- D[index,] # subset D to run random forest
 
modelRF <- randomForest(y ~. , data=train, mtry=3, ntree=50)
modelRF
importance(modelRF)
varImpPlot(modelRF) # shows importance of variables
 
#running random forest on test data
realdealTEST <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/testing.txt")
 
#making our test data into the same data structure as our D
colnames(realdealTEST)[colnames(realdealTEST)=="First in District"] <- "firstInDistrict"
colnames(realdealTEST)[colnames(realdealTEST)=="Emergency Dispatch Code"] <- "emergencyDispatchCode"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Sequence"] <- "dispatchSequence"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Status"] <- "dispatchStatus"
colnames(realdealTEST)[colnames(realdealTEST)=="Unit Type"] <- "unitType"
colnames(realdealTEST)[colnames(realdealTEST)=="PPE Level"] <- "PPELevel"
colnames(realdealTEST)[colnames(realdealTEST)=="Incident Creation Time (GMT)"] <- "incidentCreationTime"
 
realdealTEST$dept <- substr(realdealTEST$incident.ID,start=6,stop=7) # create a variable for the fire department
 
#create rush variable
bettertime <- strptime(realdealTEST$incidentCreationTime,format='%H:%M:%S')
a <- times(format(bettertime, '%H:%M:%S'))
realdealTEST$time <- a
realdealTEST$time_dec <- as.numeric(a)
 
realdealTEST$rush <- ifelse(realdealTEST$time_dec > 19/24, 'no', ifelse(
  realdealTEST$time_dec > 15/24, 'yes', ifelse(
    realdealTEST$time_dec > 10/24, 'no', ifelse(
      realdealTEST$time_dec > 5/24, 'yes', 'no'
    )
  )
))
 
realdealTEST <- (data.frame(realdealTEST[,-varToRemove.realdealTEST]))
 
# convert categorical to factor
cols <- c("year", "dispatchStatus", "PPELevel", "dept", "rush")
for(i in cols){
  realdealTEST[,i] <- as.factor(realdealTEST[,i])
}
 
# predicting
preds.rf <- predict(modelRF,realdealTEST)
 
#inserting xgb predictions into random forest NAs
NAs <- which(is.na(preds.rf)) #index of which are NAs (you would index out which have 1s)
 
xgb <- read.csv("xgb.csv")
 
x <- xgb$prediction 
 
x1 <- x[NAs] 
 
preds.rf[NAs] <- x1 #insert what you want into the index for 1s in your data set
 
#writing a csv file
submit<-data.frame(row.id= test$row.id, prediction=preds.rf)
write.csv(submit,"randomforest.csv",row.names=FALSE)
 
# LINEAR MODEL ------------------------------------------------------------
 
D <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/lafdtraining updated.csv")
#renaming variables to remove spaces
colnames(D)[colnames(D)=="First in District"] <- "firstInDistrict"
colnames(D)[colnames(D)=="Emergency Dispatch Code"] <- "emergencyDispatchCode"
colnames(D)[colnames(D)=="Dispatch Sequence"] <- "dispatchSequence"
colnames(D)[colnames(D)=="Dispatch Status"] <- "dispatchStatus"
colnames(D)[colnames(D)=="Unit Type"] <- "unitType"
colnames(D)[colnames(D)=="PPE Level"] <- "PPELevel"
colnames(D)[colnames(D)=="Incident Creation Time (GMT)"] <- "incidentCreationTime"
 
# create hour variable
D$hour <- substr(D$incidentCreationTime,start=1,stop=2)
 
vars <- c("year","firstInDistrict","dispatchSequence","dispatchStatus","unitType","PPELevel","hour","elapsed_time")
D <- na.omit(D[,vars])
 
fit <- lm(elapsed_time~ year+
            firstInDistrict+
            dispatchStatus+unitType+PPELevel+
            hour+polym(dispatchSequence,degree=11,raw=TRUE),data=D)
 
 
# Prediction for Kaggle ---------------------------------------------------
realdealTEST <- read_csv("C:/Users/admin/Desktop/Spring2017/stats101C/project/testing.txt")
 
colnames(realdealTEST)[colnames(realdealTEST)=="First in District"] <- "firstInDistrict"
colnames(realdealTEST)[colnames(realdealTEST)=="Emergency Dispatch Code"] <- "emergencyDispatchCode"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Sequence"] <- "dispatchSequence"
colnames(realdealTEST)[colnames(realdealTEST)=="Dispatch Status"] <- "dispatchStatus"
colnames(realdealTEST)[colnames(realdealTEST)=="Unit Type"] <- "unitType"
colnames(realdealTEST)[colnames(realdealTEST)=="PPE Level"] <- "PPELevel"
colnames(realdealTEST)[colnames(realdealTEST)=="Incident Creation Time (GMT)"] <- "incidentCreationTime"
 
# create hour variable
realdealTEST$hour <- substr(realdealTEST$incidentCreationTime,start=1,stop=2)
preds <- predict(fit,realdealTEST[-50777,])
submit<-data.frame(row.id= realdealTEST$row.id[-50777], prediction=preds)
 
new <- c(3245776,NA) # slight issue with one unit type not being represented in train set D; adding it back in with NA as prediction
submit <- rbind(submit,new)
 
# fill in NAs from linear model with average of xgboost and random forest predictions
avg_rf_xgb <- (preds.rf+preds.xgb)/2
submit$fill.in <- avg_rf_xgb
 
submit$prediction[which(submit$prediction %in% NA)] <- submit$fill.in[which(submit$prediction %in% NA)]
submit$fill.in <- NULL
submit$row.id <- as.integer(submit$row.id)

# submission file
write.csv(submit,"linearmodel_final.csv",row.names=FALSE)
``` 
